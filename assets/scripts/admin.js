/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! ./index.scss */ \"./src/index.scss\");\n\nvar _require = __webpack_require__(/*! ./scripts/conditional-fields */ \"./src/scripts/conditional-fields.js\"),\n    ConditionalFields = _require.ConditionalFields;\n\nvar _require2 = __webpack_require__(/*! ./scripts/tabs */ \"./src/scripts/tabs.js\"),\n    Tabs = _require2.Tabs;\n\n(function ($, window) {\n  'use strict';\n\n  var $body = $('body'); // Check if element exists\n\n  var psExists = function psExists(el) {\n    return el.length > 0;\n  };\n  /************************************************************\r\n         01 - colorpicker\r\n     *************************************************************/\n\n\n  function TinywpColorPicker() {\n    var $colorpicker = $body.find('.field-colorpicker');\n\n    if (psExists($colorpicker)) {\n      $colorpicker.each(function () {\n        $(this).wpColorPicker();\n      });\n    }\n  }\n\n  ;\n  /************************************************************\r\n         03 - imageUpload activation\r\n     *************************************************************/\n\n  function TinyimageUpload() {\n    var $image_upload = $body.find('.fields-wrapper.image-upload');\n\n    if (psExists($image_upload)) {\n      $image_upload.each(function () {\n        // on upload button click\n        $(this).on('click', '.upload-btn', function (e) {\n          e.preventDefault();\n          var button_parent = e.target.closest('.field-wrapper'),\n              preview = button_parent.querySelector('.preview-image'),\n              input_field = button_parent.querySelector('.image_input_field'),\n              custom_uploader = wp.media({\n            title: 'Insert image',\n            library: {\n              type: 'image'\n            },\n            button: {\n              text: 'Use this image' // button label text\n\n            },\n            multiple: false\n          });\n          custom_uploader.on('open', function () {\n            // var lib = custom_uploader.state().get('library');\n            var ids_value = input_field.value.split(',');\n            var selection = custom_uploader.state().get('selection');\n            ids_value.forEach(function (id) {\n              var attachment = wp.media.attachment(id);\n              attachment.fetch(); // lib.add( attachment ? [ attachment ] : [] );\n\n              selection.add(attachment ? [attachment] : []);\n            });\n          });\n          custom_uploader.on('select', function () {\n            // it also has \"open\" and \"close\" events\n            var attachment = custom_uploader.state().get('selection').first().toJSON();\n            preview.style.backgroundImage = 'url(' + attachment.url + ')';\n            input_field.value = attachment.id;\n            button_parent.querySelector('.metabox-image-edit').href = admin_script.adminurl + '/post.php?post=' + attachment.id + '&action=edit';\n            button_parent.querySelector('.preview-wrap').classList.remove('button-hide');\n          });\n          custom_uploader.open();\n        });\n        $(this).on('click', '.metabox-image-remove', function (e) {\n          e.preventDefault();\n          var button_parent = e.target.closest('.field-wrapper'),\n              preview = button_parent.querySelector('.preview-image'),\n              input_field = button_parent.querySelector('.image_input_field');\n          input_field.value = '';\n          preview.style.backgroundImage = 'url(https://via.placeholder.com/700x200)';\n          button_parent.querySelector('.preview-wrap').classList.add('button-hide');\n        });\n      });\n    }\n  }\n\n  ;\n  /************************************************************\r\n         03 - imageUpload activation\r\n     *************************************************************/\n\n  function TinygalleryImage() {\n    var $galleryimage = $body.find('.image-gallery');\n\n    if (psExists($galleryimage)) {\n      $galleryimage.each(function () {\n        // on upload button click\n        $(this).on('click', '.upload-btn', function (e) {\n          e.preventDefault();\n          var button_parent = e.target.closest('.field-wrapper'),\n              preview = button_parent.querySelector('.preview-list'),\n              input_field = button_parent.querySelector('.image_input_field'),\n              custom_uploader = wp.media({\n            title: 'Insert image',\n            library: {\n              type: 'image'\n            },\n            button: {\n              text: 'Use this image' // button label text\n\n            },\n            multiple: 'add'\n          });\n          custom_uploader.on('open', function () {\n            // var lib = custom_uploader.state().get('library');\n            var ids_value = input_field.value.split(',');\n            var selection = custom_uploader.state().get('selection');\n            ids_value.forEach(function (id) {\n              var attachment = wp.media.attachment(id);\n              attachment.fetch(); // lib.add( attachment ? [ attachment ] : [] );\n\n              selection.add(attachment ? [attachment] : []);\n            });\n          });\n          custom_uploader.on('select', function () {\n            // it also has \"open\" and \"close\" events\n            var attachment = custom_uploader.state().get('selection').toJSON();\n            var image = '';\n            var ids = [];\n            attachment.forEach(function (item) {\n              if (item.id) {\n                image += '<li class=\"preview-wrap\" data-id=' + item.id + '><div class=\"preview-image\" style=\"background-image:url(' + item.url + ')\"></div> <button class=\"metabox-image-remove\"><span class=\"dashicons dashicons-no-alt\"></span></button><a href=\"' + admin_script.adminurl + '/post.php?post=' + item.id + '&action=edit\" class=\"metabox-image-edit\" target=\"_blank\"> <span class=\"dashicons dashicons-edit-large\"></span> </a> </li>';\n                ids.push(item.id);\n              }\n            });\n            preview.innerHTML = image;\n            var filtered = ids.filter(function (el) {\n              return el != false;\n            });\n            input_field.value = filtered;\n          });\n          custom_uploader.open();\n        });\n        $(this).on('click', '.metabox-image-remove', function (e) {\n          e.preventDefault();\n          var preview = e.target.closest('.preview-wrap'),\n              input_field = e.target.closest('.field-wrapper').querySelector('.image_input_field'),\n              preview_id = preview.getAttribute('data-id'),\n              input_value = input_field.value.split(','),\n              input_value = input_value.filter(function (item) {\n            return item !== preview_id;\n          });\n          preview.remove();\n          input_field.value = String(input_value);\n        });\n        $(this).find('ul.preview-list').sortable({\n          opacity: 0.8,\n          stop: function stop(event) {\n            // console.log( event.target.children );\n            var input_field = event.target.closest('.field-wrapper').querySelector('.image_input_field'),\n                ids = [];\n            Array.from(event.target.children).forEach(function (item) {\n              ids.push(item.getAttribute('data-id'));\n            });\n            var filtered = ids.filter(function (el) {\n              return el != false;\n            });\n            console.log(filtered);\n            input_field.value = String(filtered);\n          }\n        });\n      });\n    }\n  }\n\n  ;\n  /************************************************************\r\n         04 - Checkbox\r\n     *************************************************************/\n\n  function TinycheckBox() {\n    var selector = $('.fields-wrapper').find(\"[type=checkbox]\");\n\n    if (psExists(selector)) {\n      selector.each(function (index, item) {\n        // console.log($(item).attr('name'));\n        var curent_value = $(item).val();\n        $(item).on('change', function () {\n          var curent_value = $(selector).val();\n\n          if (curent_value && 1 == curent_value) {\n            $(item).val(0);\n          } else if (curent_value && 0 == curent_value) {\n            $(item).val(1);\n          }\n        });\n      });\n    }\n  }\n  /************************************************************\r\n     05 - Range Slider\r\n     *************************************************************/\n\n\n  function TinyRangeSlider() {\n    if (document.querySelectorAll('.range-slider').length) {\n      var $rangeslider = document.querySelectorAll('.range-slider');\n      range_slider($rangeslider);\n    }\n  }\n\n  ;\n  /************************************************************\r\n         05 - colorpicker\r\n     *************************************************************/\n\n  function TinyTabs() {\n    Tabs();\n  }\n\n  ; // window.mfConditionalFields\n\n  function TinyConditional() {\n    ConditionalFields('#post');\n  }\n\n  ;\n  /************************************************************\r\n         02 - Select2 activation\r\n     *************************************************************/\n\n  function Tinyselect2($select2) {\n    if (psExists($select2)) {\n      // destroy each select2\n      $select2.each(function () {\n        console.log(this);\n        var parent = $(this).parent('.selectbox-wraper');\n        var multiselect = parent.attr('data-multiselect');\n        var selectobj = {\n          multiple: false\n        };\n\n        if (Boolean(multiselect)) {\n          selectobj.multiple = true;\n        }\n\n        var selectEl = $(this).select2(selectobj);\n\n        if (Boolean(multiselect)) {\n          selectEl.next().children().children().children().sortable({\n            containment: 'parent',\n            stop: function stop(event, ui) {\n              ui.item.parent().children('[title]').each(function () {\n                var title = $(this).attr('title');\n                var original = $('option:contains(' + title + ')', selectEl).first();\n                original.detach();\n                selectEl.append(original);\n              });\n              selectEl.change();\n            }\n          });\n        }\n      });\n    }\n  }\n\n  ;\n\n  function Tinyreinitialize() {\n    var $select2 = $body.find('.selectbox-wraper select');\n    TinywpColorPicker(), TinyimageUpload(), TinygalleryImage(), TinycheckBox();\n    TinyTabs();\n    TinyConditional();\n    TinyRangeSlider();\n    Tinyselect2($select2);\n  }\n\n  function Tinyclone($this) {\n    var parent_class = $($this).parents('.fields-wrapper');\n    var parent_id = parent_class.attr('data-fields-id');\n    var rpc = parent_class.find('.repater-container');\n    var number = $($this).attr('data-count');\n    var nextCount = parseInt(number) + 1;\n    var parent_string = eval(parent_id);\n    parent_string = parent_string.replaceAll('{count}', nextCount);\n    var CloneHtml = $.parseHTML(parent_string);\n    rpc.append(CloneHtml);\n    $($this).attr('data-count', nextCount);\n    Tinyreinitialize();\n  }\n\n  $(document).on('ready', function () {\n    Tinyreinitialize();\n  });\n  $('.tiny-button').on('click', function () {\n    Tinyclone(this);\n  });\n})(jQuery, window);\n\n//# sourceURL=webpack://starter-block/./src/index.js?");

/***/ }),

/***/ "./src/scripts/conditional-fields.js":
/*!*******************************************!*\
  !*** ./src/scripts/conditional-fields.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\r\n *\r\n * MF Conditional Fields\r\n * A JavaScript library that show/hide form fields based on the values of other fields.\r\n *\r\n * Source : https://github.com/bomsn/mf-conditional-fields\r\n * Version 1.0.3\r\n *\r\n */\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.ConditionalFields = function (forms) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Ensure the passed form(s) is in the correct format (array of elements)\n  switch (_typeof(forms)) {\n    case 'string':\n      forms = document.querySelectorAll(forms);\n      break;\n\n    case 'object':\n      // Check if this is an object of objects \n      // ( special logic to handle the form elements provided by jQuery )\n      if (Array.isArray(forms) === false && Object.prototype.hasOwnProperty.call(forms, \"0\")) {\n        // Clean the object, make sure it only hold HTML FORM elements\n        forms = Object.fromEntries(Object.entries(forms).filter(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              val = _ref2[1];\n\n          return !isNaN(key) && typeof val.elements !== \"undefined\";\n        })); // Keep object values only ( this will convert our object to array )\n\n        forms = Object.values(forms);\n      } else {\n        forms = Array.isArray(forms) ? forms : [forms];\n      }\n\n      break;\n  }\n\n  var theRules = options.rules || 'inline',\n      isDynamic = options.dynamic || false,\n      unsetHidden = options.unsetHidden || false,\n      disableHidden = options.disableHidden || false,\n      debug = options.debug || false,\n      depth = options.depth || 3,\n      fields = [],\n      // To hold all available conditional fields\n  triggers = [],\n      // To hold every trigger field\n  triggersListening = []; // To hold every trigger that has an eventlistener attached to it;\n\n  var self = {\n    /**\r\n     * Initialize a field by extracting the conditional rules and adding\r\n     * any associated trigger fields to the triggers array to be attached to\r\n     * an on \"change\" eventListener later\r\n     *\r\n     * @param field The field object\r\n     * @param formIndex Form index of the\r\n     */\n    initField: function initField(field, formIndex) {\n      var condition = field.getAttribute('data-conditional-rules');\n\n      if (condition.length > 0) {\n        condition = JSON.parse(condition);\n        var container = 'container' in condition ? condition['container'] : '',\n            action = 'action' in condition ? condition['action'] : 'show',\n            logic = 'logic' in condition ? condition['logic'] : 'or',\n            rules = 'rules' in condition ? condition['rules'] : []; // if a single rule is provided, insert it into an array\n\n        if (_typeof(rules) == \"object\" && typeof rules.length == \"undefined\") {\n          rules = [rules];\n        } // If rules are available, start a loop to implement each rule\n\n\n        if (rules.length > 0) {\n          for (var i = 0; rules.length > i; i++) {\n            if (\"group\" in rules[i]) {\n              // Store grouped rules triggers\n              for (var r = 0; rules[i].group.length > r; r++) {\n                if (\"name\" in rules[i].group[r] && !triggers[formIndex].includes(rules[i].group[r].name)) {\n                  triggers[formIndex].push(rules[i].group[r].name);\n                }\n              }\n            } else {\n              // Store normal rules triggers\n              if (\"name\" in rules[i] && !triggers[formIndex].includes(rules[i].name)) {\n                triggers[formIndex].push(rules[i].name);\n              }\n            }\n          }\n\n          field.removeAttribute('data-conditional-rules');\n          field.mfConditionalContainerSelector = container;\n          field.mfConditionalAction = action;\n          field.mfConditionalLogic = logic;\n          field.mfConditionalRules = rules;\n          field.mfConditionalFormIndex = formIndex;\n          self.updateField(field);\n        }\n      }\n    },\n\n    /**\r\n     * Update a field by checking the form for any triggers associated\r\n     * with it, then use the field conditional rules to compare the trigger value\r\n     * with the targeted values, and display or hide the field if there is a match\r\n     *\r\n     * @param field The field object\r\n     */\n    updateField: function updateField(field) {\n      var depthLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var formIndex = field.mfConditionalFormIndex,\n          action = field.mfConditionalAction,\n          logic = field.mfConditionalLogic,\n          rules = field.mfConditionalRules,\n          isConditionMet = false;\n\n      if (rules.length > 0) {\n        for (var i = 0; rules.length > i; i++) {\n          var isRuleMet = false;\n\n          if (\"group\" in rules[i]) {\n            // Evaluate grouped rules\n            var relation = rules[i].relation || 'and',\n                isGroupRulesMet = false;\n\n            for (var r = 0; rules[i].group.length > r; r++) {\n              isGroupRulesMet = self.evaluateRule(rules[i].group[r], formIndex); // Break out of this for loop if we have a final decision about this rule ( met or not )\n\n              if (isGroupRulesMet == false && 'and' == relation) {\n                isRuleMet = false;\n                break;\n              } else if (isGroupRulesMet && 'or' == relation) {\n                isRuleMet = true;\n                break;\n              }\n\n              isRuleMet = isGroupRulesMet;\n            }\n          } else {\n            // Evaluate normal rules\n            isRuleMet = self.evaluateRule(rules[i], formIndex);\n          } // Break out of this for loop if we have a final decision about this rule, or rules group ( met or not )\n\n\n          if (isRuleMet === false && 'and' == logic) {\n            isConditionMet = false;\n            break;\n          } else if (isRuleMet && 'or' == logic) {\n            isConditionMet = true;\n            break;\n          }\n\n          isConditionMet = isRuleMet;\n        }\n      } // Toggle the fields based on the value of `isConditionMet`\n\n\n      if (isConditionMet) {\n        self.toggleField(field, action, depthLevel);\n      } else {\n        if ('hide' == action) {\n          action = 'show';\n        } else if ('show' == action) {\n          action = 'hide';\n        } else if ('disable' == action) {\n          action = 'enable';\n        } else if ('enable' == action) {\n          action = 'disable';\n        } else {\n          action = 'none';\n        }\n\n        self.toggleField(field, action, depthLevel);\n      }\n    },\n\n    /**\r\n     * Show or hide the provided field based on the `action` provided\r\n     * then search for any dependant fields ( if the provided field is\r\n     * a trigger for another conditional field ) and show/hide accordingly\r\n     *\r\n     * @param field The field object\r\n     * @param action The action to perform ( show/hide )\r\n     */\n    toggleField: function toggleField(field, action, depthLevel) {\n      var formIndex = field.mfConditionalFormIndex,\n          name = field.name,\n          containerSelector = field.mfConditionalContainerSelector,\n          container = null; // Check if this field is a trigger and re-evaluate dependant fields recursively\n      // Ensure we don't go too deep to avoid memory leak\n\n      if (depthLevel < depth) {\n        if (triggers[formIndex].includes(name)) {\n          var dependantFields = self.getDependantField(name, formIndex);\n\n          if (dependantFields.length > 0) {\n            for (var i = 0; dependantFields.length > i; i++) {\n              if (action == 'hide') {\n                // If we are hiding this field, make sure any conditional field associated are hidden as well\n                self.toggleField(dependantFields[i], 'hide', depthLevel++);\n              } else if (action == 'show') {\n                /// If we are showing this field, make sure any conditional field associated are re-evaluated\n                self.updateField(dependantFields[i], depthLevel++);\n              }\n            }\n          }\n        }\n      }\n\n      if (action == 'hide') {\n        // Hide the field\n        if (containerSelector == '') {\n          field.setAttribute(\"hidden\", true);\n        } else {\n          container = field.closest(\"\" + containerSelector + \"\");\n\n          if (container) {\n            container.setAttribute(\"hidden\", true);\n          }\n        }\n\n        if (disableHidden) {\n          field.setAttribute(\"disabled\", \"disabled\");\n        }\n\n        if (unsetHidden) {\n          if ('checkbox' == field.type || 'radio' == field.type) {\n            field.checked = false;\n          } else {\n            field.value = '';\n          }\n        }\n      } else if (action == 'disable') {\n        field.setAttribute(\"disabled\", \"disabled\");\n      } else if (action == 'enable') {\n        if (field.hasAttribute(\"disabled\")) {\n          field.removeAttribute(\"disabled\");\n        }\n      } else if (action == 'show') {\n        // Show the field\n        if (containerSelector == '') {\n          field.removeAttribute(\"hidden\");\n        } else {\n          container = field.closest(\"\" + containerSelector + \"\");\n\n          if (container) {\n            container.removeAttribute(\"hidden\");\n          }\n        }\n\n        if (disableHidden) {\n          field.removeAttribute(\"disabled\");\n        }\n      }\n    },\n\n    /**\r\n     * Find and return any conditional fields based on their trigger name attribute,\r\n     *\r\n     * @param name The name attribute of the trigger field\r\n     * @param formIndex The index of the form which holds this trigger\r\n     */\n    getDependantField: function getDependantField(name, formIndex) {\n      var dependantFields = []; // Loop through available conditional fields and find any that are using a dependant on another field based on name attribute of the latter\n\n      if (typeof fields[formIndex] !== \"undefined\") {\n        for (var i = 0; fields[formIndex].length > i; i++) {\n          // Only update the conditional fields associated with this trigger field\n          if (\"mfConditionalRules\" in fields[formIndex][i]) {\n            // Run a test to see if this field is dependant on the field with the supplied `name` attribute\n            var isDependant = fields[formIndex][i][\"mfConditionalRules\"].some(function (rule) {\n              if (\"group\" in rule) {\n                // Handle grouped rules\n                for (var r = 0; rule.group.length > r; r++) {\n                  if (rule.group[r].name === name) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else {\n                // Handle normal rules\n                return rule.name === name;\n              }\n            });\n\n            if (typeof isDependant !== \"undefined\" && isDependant !== false) {\n              dependantFields.push(fields[formIndex][i]);\n            }\n          }\n        }\n      }\n\n      return dependantFields;\n    },\n\n    /**\r\n     * Evaluate the provided rule to check if it's true or false\r\n     *\r\n     * @param rule the rule to evaluate\r\n     * @param formIndex index of the form where the evaluation should occur\r\n     */\n    evaluateRule: function evaluateRule(rule, formIndex) {\n      var name = rule.name,\n          operator = rule.operator,\n          value = rule.value;\n\n      if (triggers[formIndex].includes(name)) {\n        var trigger = forms[formIndex].querySelectorAll('[name=\"' + name + '\"]'),\n            triggerType,\n            triggerValue,\n            isRuleMet;\n\n        if (trigger.length > 0) {\n          triggerType = trigger[0].type; // Get the first element and assign it a trigger if it's not a radio or checkbox ( there is a possibility to have same name attribute on these )\n\n          if (triggerType !== 'radio' && triggerType !== 'checkbox') {\n            trigger = trigger[0];\n          } // Get the trigger value(s)\n\n\n          if (triggerType == 'radio' || triggerType == 'checkbox') {\n            // Special logic for handling radios and checkboxs since they can have the same name attribute.\n            triggerValue = [];\n\n            for (var i = 0; i < trigger.length; i++) {\n              if (trigger[i].checked) {\n                triggerValue.push(trigger[i].value);\n              } // Convert array to a string in the last loop iteration\n\n\n              if (i === trigger.length - 1) {\n                triggerValue = triggerValue.join('|');\n              }\n            }\n          } else {\n            triggerValue = trigger.value;\n          }\n\n          isRuleMet = self.compareValues(operator, triggerValue, value);\n        }\n\n        return isRuleMet;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Compare provided strings and return true if there is a match, return false otherwise.\r\n     *\r\n     * @param operator The opetrator to use for comparision\r\n     * @param searchVal the string to compare\r\n     * @param targetVal the string to compare against\r\n     */\n    compareValues: function compareValues(operator, searchVal, targetVal) {\n      searchVal = searchVal ? searchVal.toString().toLowerCase() : \"\", targetVal = targetVal ? targetVal.toString().toLowerCase() : \"\";\n\n      switch (operator) {\n        case \"is\":\n          return targetVal === searchVal;\n\n        case \"isnot\":\n          return targetVal !== searchVal;\n\n        case \"greaterthan\":\n          return isNaN(targetVal) || isNaN(searchVal) ? false : Number(targetVal) > Number(searchVal);\n\n        case \"lessthan\":\n          return isNaN(targetVal) || isNaN(searchVal) ? false : Number(targetVal) < Number(searchVal);\n\n        case \"contains\":\n          return searchVal.includes(targetVal);\n\n        case \"doesnotcontain\":\n          return !searchVal.includes(targetVal);\n\n        case \"beginswith\":\n          return searchVal.startsWith(targetVal);\n\n        case \"doesnotbeginwith\":\n          return !searchVal.startsWith(targetVal);\n\n        case \"endswith\":\n          return searchVal.endsWith(targetVal);\n\n        case \"doesnotendwith\":\n          return !searchVal.endsWith(targetVal);\n\n        case \"isempty\":\n          return searchVal === \"\";\n\n        case \"isnotempty\":\n          return searchVal !== \"\";\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Depending on the action provided, search the form for new fields,\r\n     * initialize them and attach relevant event listeners, or,\r\n     * remove the missing fields from `fields`, `triggers`, `triggersListening` variables\r\n     *\r\n     * @param formIndex The index of the form to update\r\n     */\n    updateForm: function () {\n      var _updateForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(formIndex) {\n        var action,\n            step1,\n            step2,\n            n,\n            trigger,\n            oldName,\n            dependantFields,\n            i,\n            nameUpdated,\n            r,\n            rg,\n            c,\n            prefix,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                action = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'add';\n\n                if (!(typeof forms[formIndex] == \"undefined\")) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 3:\n                if (!(action == 'add')) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.prev = 4;\n                _context.next = 7;\n                return new Promise(function (resolve, reject) {\n                  var newConditionalFields = [];\n\n                  if (theRules == 'inline') {\n                    newConditionalFields = forms[formIndex].querySelectorAll('[data-conditional-rules]');\n                  } else {\n                    for (var r = 0; theRules.length > r; r++) {\n                      if (\"field\" in theRules[r]) {\n                        var theFields = forms[formIndex].elements[theRules[r]['field']];\n                        theFields = theFields instanceof RadioNodeList ? Array.from(theFields) : [theFields];\n\n                        for (var f = 0; theFields.length > f; f++) {\n                          if (typeof theFields[f] !== \"undefined\") {\n                            var theField = theFields[f];\n                            theField.setAttribute(\"data-conditional-rules\", JSON.stringify(theRules[r]));\n                            newConditionalFields.push(theField);\n                          }\n                        }\n\n                        delete theRules[r]['field'];\n                      }\n                    } // clean `theRules` variable since we'll not need it anymore\n\n\n                    // clean `theRules` variable since we'll not need it anymore\n                    theRules = null;\n                  } // Add the available conditional fields to an array\n\n\n                  // Add the available conditional fields to an array\n                  if (newConditionalFields.length > 0) {\n                    fields[formIndex] = fields[formIndex].concat(Array.prototype.slice.call(newConditionalFields));\n                    resolve(newConditionalFields);\n                  } else {\n                    reject(\"No conditional fields found on step 1\");\n                  }\n                });\n\n              case 7:\n                step1 = _context.sent;\n                _context.next = 10;\n                return new Promise(function (resolve, reject) {\n                  if (step1.length > 0) {\n                    // Loop through each form fields\n                    for (var i = 0; step1.length > i; i++) {\n                      self.initField(step1[i], formIndex); // Resolve on the last field\n\n                      // Resolve on the last field\n                      if (i === step1.length - 1) {\n                        resolve();\n                      }\n                    }\n                  } else {\n                    reject(\"No conditional fields to initialize on step 2\");\n                  }\n                });\n\n              case 10:\n                step2 = _context.sent;\n\n                /*\r\n                * After all tasks are finished, add necessary event listeners to the triggers, if available.\r\n                * triggers are added from `self.initField()`\r\n                */\n                if (triggers.length > 0) {\n                  // Loop through each name attributes in the triggrs array for the current form\n                  for (n = 0; triggers[formIndex].length > n; n++) {\n                    if (!triggersListening[formIndex].includes(triggers[formIndex][n])) {\n                      trigger = forms[formIndex].querySelectorAll('[name=\"' + triggers[formIndex][n] + '\"]'); // Make sure to catch multiple checkboxes (workaround)\n\n                      if (trigger.length === 0) {\n                        trigger = forms[formIndex].querySelectorAll('[type=\"checkbox\"][name=\"' + triggers[formIndex][n] + '[]\"]');\n\n                        if (trigger.length > 0) {\n                          oldName = triggers[formIndex][n]; // Replace the old name with the new one for the triggers so that the listener can work\n\n                          triggers[formIndex][n] = triggers[formIndex][n] + \"[]\"; // Update all dependant field rules to include the `name` attribute appended with []\n\n                          dependantFields = self.getDependantField(oldName, formIndex);\n\n                          if (dependantFields.length > 0) {\n                            for (i = 0; dependantFields.length > i; i++) {\n                              if (dependantFields[i].mfConditionalRules.length > 0) {\n                                nameUpdated = false;\n\n                                for (r = 0; dependantFields[i].mfConditionalRules.length > r; r++) {\n                                  if (\"group\" in dependantFields[i].mfConditionalRules[r]) {\n                                    for (rg = 0; dependantFields[i].mfConditionalRules[r].group.length > rg; rg++) {\n                                      if (dependantFields[i].mfConditionalRules[r].group[rg].name == oldName) {\n                                        dependantFields[i].mfConditionalRules[r].group[rg].name = oldName + \"[]\";\n                                        nameUpdated = true;\n                                      }\n                                    }\n                                  } else {\n                                    if (dependantFields[i].mfConditionalRules[r].name == oldName) {\n                                      dependantFields[i].mfConditionalRules[r].name = oldName + \"[]\";\n                                      nameUpdated = true;\n                                    }\n                                  }\n                                } // If the field name attribute was changed, Update the field as a final step.\n\n\n                                if (nameUpdated) {\n                                  self.updateField(dependantFields[i]);\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n\n                      if (trigger.length > 0) {\n                        // Loop through the triggers found by querySelectorAll in the current form and assign them a Listener\n                        // usually there is only 1 element per name attribute. However, there might be multiple elements with same name, e.g. radios.\n                        for (c = 0; trigger.length > c; c++) {\n                          // Assign form index to the element to be used later by the listener to retrieve associated fields\n                          trigger[c].mfConditionalFormIndex = formIndex;\n                          trigger[c].addEventListener(\"change\", self.fieldListener, false);\n                        }\n\n                        triggersListening[formIndex].push(triggers[formIndex][n]);\n                      } // Remove reference to trigger\n\n\n                      trigger = null;\n                    }\n                  }\n                }\n\n                return _context.abrupt(\"return\", true);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](4);\n\n                if (debug) {\n                  prefix = 'formIndex: ' + formIndex;\n\n                  if (typeof forms[formIndex].getAttribute('id') !== \"undefined\") {\n                    prefix = 'formId: ' + forms[formIndex].getAttribute('id');\n                  }\n\n                  console.info(\"\".concat(prefix, \" => \").concat(_context.t0));\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 19:\n                _context.next = 26;\n                break;\n\n              case 21:\n                if (!(action == 'remove')) {\n                  _context.next = 26;\n                  break;\n                }\n\n                // Clean Fields\n                fields[formIndex] = fields[formIndex].filter(function (formField) {\n                  return typeof forms[formIndex].elements[\"\" + formField.name + \"\"] !== \"undefined\";\n                }); // Clean Triggers\n\n                triggers[formIndex] = triggers[formIndex].filter(function (fieldName) {\n                  return typeof forms[formIndex].elements[\"\" + fieldName + \"\"] !== \"undefined\";\n                }); // Clean Triggers Listening\n\n                triggersListening[formIndex] = triggersListening[formIndex].filter(function (fieldName) {\n                  return typeof forms[formIndex].elements[\"\" + fieldName + \"\"] !== \"undefined\";\n                });\n                return _context.abrupt(\"return\", true);\n\n              case 26:\n                return _context.abrupt(\"return\", false);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[4, 15]]);\n      }));\n\n      function updateForm(_x) {\n        return _updateForm.apply(this, arguments);\n      }\n\n      return updateForm;\n    }(),\n\n    /**\r\n     * Update any fields that are using this field as a trigger\r\n     *\r\n     * @param e The event object\r\n     */\n    fieldListener: function fieldListener(e) {\n      var dependantFields = self.getDependantField(e.target.name, e.target.mfConditionalFormIndex);\n\n      if (dependantFields.length > 0) {\n        for (var i = 0; dependantFields.length > i; i++) {\n          self.updateField(dependantFields[i]);\n        }\n      }\n    },\n\n    /**\r\n     * Depending on the event properties, update the a form associated form.\r\n     *\r\n     * @param e The event object\r\n     */\n    formListener: function formListener(e) {\n      var formIndex = e.target.mfConditionalFormIndex,\n          action = e.detail.action;\n      self.updateForm(formIndex, action);\n    }\n  };\n  /**\r\n   * Validate the supplied rules or rule type\r\n   */\n\n  if (theRules == 'block') {\n    var blockRules = document.getElementById('rules-mf-conditional-fields');\n\n    if (_typeof(blockRules) !== undefined) {\n      theRules = JSON.parse(blockRules.innerHTML);\n    } else {\n      if (debug) {\n        console.warn(\"The rules element could not be found.\");\n      }\n\n      return false;\n    }\n  }\n\n  if (theRules !== 'inline' && _typeof(theRules) !== \"object\") {\n    if (debug) {\n      console.warn(\"The supplied rules or rule type is not valid.\");\n    }\n\n    return false;\n  }\n  /**\r\n   * Run conditional logic processes if the form(s) is available\r\n   */\n\n\n  if (forms.length > 0) {\n    // Loop through available forms and initialize conditional logic\n    for (var i = 0; forms.length > i; i++) {\n      fields.push([]); // Add an empty array to  `field` to represent current form ( New fields can be added later if this is a dynamic form )\n\n      triggers.push([]); // Add an empty array to  `triggers` to represent current form ( triggers to be added at a later stage if conditional fields are available or dynamically added )\n\n      triggersListening.push([]); // Add an empty array to  `triggersListening` to represent current form ( triggerListening to be added at a later stage if conditional fields are available or dynamically added )\n\n      forms[i].mfConditionalFormIndex = i; // assign the conditional form index to the form element ( Used to manage conditional logic for multiple forms   )\n\n      self.updateForm(i);\n    }\n    /*\r\n    * If the form(s) is dynmaic, add necessary event listeners to the form(s) element(s)\r\n    */\n\n\n    if (isDynamic) {\n      // Loop through the forms and add event listener ( mfConditionalFormUpdated needs to be created, then dispatched each time the form is updated with new fields )\n      for (var e = 0; forms.length > e; e++) {\n        forms[e].addEventListener(\"mfConditionalFormUpdated\", self.formListener, false);\n      }\n    }\n  } else {\n    if (debug) {\n      console.warn(\"The supplied conditional form was not found\");\n    }\n\n    return false;\n  }\n};\n\n//# sourceURL=webpack://starter-block/./src/scripts/conditional-fields.js?");

/***/ }),

/***/ "./src/scripts/tabs.js":
/*!*****************************!*\
  !*** ./src/scripts/tabs.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.Tabs = function () {\n  if (document.querySelector('.tinytab')) {\n    (function () {\n      var tinytab = document.querySelector('.tinytab');\n\n      var tab = function tab() {\n        var active = tinytab.querySelector('.active');\n        var active_class = active.getAttribute('data-tab'); // Get all elements with class=\"tabcontent\" and hide them\n\n        var tabcontent = document.getElementsByClassName('fields-wrapper');\n\n        for (var i = 0; i < tabcontent.length; i++) {\n          tabcontent[i].style.display = 'none';\n        }\n\n        var tablinks = document.getElementsByClassName(active_class);\n\n        for (var _i = 0; _i < tablinks.length; _i++) {\n          tablinks[_i].style.display = '';\n        }\n      }; // Add event listener to table\n\n\n      var el = tinytab.querySelectorAll(\".tablinks\");\n\n      for (var i = 0; i < el.length; i++) {\n        el[i].addEventListener(\"click\", function (event) {\n          event.preventDefault();\n          var active = tinytab.querySelectorAll('.active');\n\n          for (var j = 0; j < active.length; j++) {\n            active[j].classList.remove(\"active\");\n          }\n\n          event.target.classList.add(\"active\");\n          tab();\n        });\n      }\n\n      tab();\n    })();\n  }\n};\n\n//# sourceURL=webpack://starter-block/./src/scripts/tabs.js?");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://starter-block/./src/index.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;